!function(s,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e:e(s)}(window,(function(s){"use strict";if(!s)throw new Error("FrostUI-PasswordStrength requires a Window.");if(!("UI"in s))throw new Error("FrostUI-PasswordStrength requires FrostUI.");const e=s.Core,t=s.dom,r=s.UI;class o extends r.BaseComponent{constructor(s,e){super(s,e),this._settings.container?this._container=t.findOne(this._settings.container):this._container=t.closest(this._node,":not(.form-input):not(.input-group)"),this._render(),this._refresh(),t.addEvent(this._node,"input.ui.passwordstrength",(s=>{this._refresh()}))}dispose(){t.remove(this._progress),t.removeEvent(this._node,"input.ui.passwordstrength"),this._container=null,this._progress=null,this._progressBar=null,super.dispose()}getStrength(){const s=t.getValue(this._node);return this.constructor.getStrength(s,this._settings)}}Object.assign(o.prototype,{_refresh(){const s=this.getStrength();let e;for(const t of this._settings.levels){if(s<t.score)break;e=t}t.setStyle(this._progressBar,"width",`${s}%`),t.setAttribute(this._progressBar,"aria-valuenow",s),t.setAttribute(this._progressBar,"class",this.constructor.classes.progressBar),this._settings.striped&&t.addClass(this._progressBar,this.constructor.classes.progressBarStriped),t.addClass(this._progressBar,e.class),e.text&&t.setText(this._progressBar,e.text)},_render(){this._progress=t.create("div",{class:this.constructor.classes.progress}),this._progressBar=t.create("div",{attributes:{role:"progressbar","aria-valuemin":0,"aria-valuemax":100}}),t.append(this._progress,this._progressBar),t.append(this._container,this._progress)}}),Object.assign(o,{getStrength(s,t){if((t=e.extend({},{...t,...this.strengthDefaults})).commonPasswords.includes(s))return 0;const r=s.length;if(r<t.minLength)return 0;let o=r*t.lengthMultiplier,n=0,i=0,l=0,a=0;const c=[],h=[],p=[],u=[],g={};for(let e=0;e<r;e++){const t=s[e],r=t.charCodeAt(0);r>=48&&r<=57?(l++,p.push(e)):r>=65&&r<=90?(n++,c.push(e)):r>=97&&r<=122?(i++,h.push(e)):(a++,u.push(e)),g[t]?g[t]++:g[t]=1}n!==r&&i!==r&&(0!==n&&(o+=(r-n)*t.upperLowerMultiplier),0!==i&&(o+=(r-i)*t.upperLowerMultiplier)),l!==r&&t.numberMultiplier,o+=a*t.symbolMultiplier;for(const s of[p,u]){o+=s.filter((s=>s&&s!==r-1)).length*t.innerMultiplier}n+i===r&&(o-=r),l===r&&(o-=r);const d=Object.values(g).reduce(((s,e)=>s+e-1),0);if(d>0&&(o-=Math.floor(d/(r-d))+1),r>2){for(const e of[/[a-z]{2,}/g,/[A-Z]{2,}/g,/[0-9]{2,}/g]){const r=s.matchAll(e);if(r)for(const s of r)o-=(s[0].length-1)*t.sequentialMultiplier}const e=s.toLowerCase(),r=c.concat(h),n=this._findSequences(e,r);for(const s of n)s.length>2&&(o-=(s.length-2)*t.sequentialMultiplier);const i=this._findSequences(e,p);for(const s of i)s.length>2&&(o-=(s.length-2)*t.sequentialMultiplier)}return e.clamp(o,0,100)}}),Object.assign(o,{_findSequences(s,e){const t=[];let r=[];for(let o=0;o<e.length-1;o++){const n=e[o],i=e[o+1],l=i-n,a=s[n],c=s[i],h=c.charCodeAt(0)-a.charCodeAt(0);1===l&&1===h?(r.length||r.push(a),r.push(c)):r.length&&(t.push(r),r=[])}return r.length&&t.push(r),t}}),o.defaults={levels:[{score:0,class:"bg-danger",text:"Very Weak"},{score:20,class:"bg-danger",text:"Weak"},{score:40,class:"bg-warning",text:"Normal"},{score:60,class:"bg-success",text:"Strong"},{score:80,class:"bg-success",text:"Very Strong"}],container:null,striped:!1},o.strengthDefaults={commonPasswords:["password"],innerMultiplier:4,lengthMultiplier:5,minLength:6,numberMultiplier:3,sequentialMultiplier:1,symbolMultiplier:7,upperLowerMultiplier:2},o.classes={progress:"progress mt-2",progressBar:"progress-bar",progressBarStriped:"progress-bar-striped"},r.initComponent("passwordstrength",o),r.PasswordStrength=o}));